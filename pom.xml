<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ca.bcit.comp4601</groupId>
  <artifactId>A00985511_COMP4016_Assignment02</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <name>A00985511_COMP4016_Assignment02 Maven Webapp For Docker</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <!-- Javax.servlet is essential to this Web application.
     -->
    <dependency>
	 <groupId>javax.servlet</groupId>
 	 <artifactId>javax.servlet-api</artifactId>
 	 <version>4.0.0</version>
 	 <scope>provided</scope>
 	</dependency>
 	<!-- Removed for now, 
 	but in case we want to add in Log4J2 in the future, 
 	we can do it via uncommenting these dependencies.-->
 	<dependency>
    	<groupId>org.apache.logging.log4j</groupId>
    	<artifactId>log4j-api</artifactId>
    	<version>2.13.0</version>
  	</dependency>
  	<dependency>
    	<groupId>org.apache.logging.log4j</groupId>
    	<artifactId>log4j-core</artifactId>
    	<version>2.13.0</version>
  	</dependency>
  	<dependency>
		<groupId>org.apache.logging.log4j</groupId>
		<artifactId>log4j-web</artifactId>
		<version>2.13.0</version>
	</dependency>
	  
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
		<scope>provided</scope>
	</dependency>
	
	<!-- Easiest way to support JSOn -->
	<dependency>
    	<groupId>org.json</groupId>
    	<artifactId>json</artifactId>
    	<version>20250517</version>
	</dependency>
	
  	<!-- -->
  </dependencies>

  <build>
    <finalName>ROOT</finalName><!-- Just to get us at the top-level domain of a wildfly deployment. -->
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.4.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
          <configuration>
			<source>1.6</source>
			<target>1.6</target>
		  </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.3.1</version>
          <configuration>
			  <!--  Copying the created war file into the Deployment folder of WildFly -->
					<outputDirectory>${env.JBOSS_HOME}/standalone/deployments</outputDirectory>				
					<!--  Including source code to the generated war file -->
					<webResources>
						<resource>
							<directory>${project.build.sourceDirectory}</directory>
							<targetPath>WEB-INF/classes</targetPath>
						</resource>
					</webResources>
		  </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.4</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
